package view;

//<editor-fold defaultstate="collapsed" desc=" Librerías importadas... ">
import java.awt.Component;

import javax.persistence.EntityManagerFactory;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

import model.DAO.CuentaCorrienteDAO;
import model.entity.CuentaCorriente;

import utilities.Banking;
import utilities.Functions;
//</editor-fold>

/**
 * Panel de datos para la clase {@link CuentaCorriente}, derivado de la clase
 * {@link pnlAppSoftBank}.
 *
 * @author Ignacio Pineda Martín
 */
public class pnlCuentaCorriente extends pnlAppSoftBank {
    
    protected CuentaCorrienteDAO cdao;
    protected CuentaCorriente cuentaCorriente = new CuentaCorriente();

    /**
     * Creates new form pnlCuentaCorriente
     */
    public pnlCuentaCorriente() {
        initComponents();
    }
    
    public pnlCuentaCorriente(EntityManagerFactory emf) {
        this();
        this.jpaObject = cuentaCorriente;
        this.emf = emf;
        // Creamos el DAO con su EntityManagerFactory.
        cdao = new CuentaCorrienteDAO(emf);
        // Preparamos el panel en su estado inicial.
        limpiarPanel();
        // Hacemos que la tabla no sea editable.
        tblCuentaCorriente.setDefaultEditor(Object.class, null);        
    }
    
    public void setJPAObject(CuentaCorriente jpaObject) {
        this.cuentaCorriente = jpaObject;
        rellenarCampos();
    }
    
    public CuentaCorriente getJPAObject() {
        recogerCampos();
        return this.cuentaCorriente;
    }
    
    @Override
    public void sendJPAObjectToFrmParent() {
        if (this.frmParent != null) {
            frmParent.setJPAObject(this.cuentaCorriente);            
        }        
    }
    
    /**
     * Método para limpiar el panel al estado inicial. Necesario para ser
     * invocado desde el botón "Limpiar" del formulario contenedor.
     */
    protected final void limpiarPanel() {
        vaciarCampos();
        mostrarTabla("");
        inicializarFormulario();
    }
    
    /**
     * Método para inicializar los campos del formulario.
     */
    protected void vaciarCampos() {
        cuentaCorriente.setIdCuentaCorriente(null);
        txtNumeroCuenta.setText("");
        lblTxtIBAN.setText("");
        lblTxtImpSaldoActual.setText("");
        txtTipoInteres.setText("");
    }
    
    /**
     * Método para rellenar los campos del formulario con la propiedad
     * {@link cuentaCorriente}
     */
    protected void rellenarCampos() {
        txtNumeroCuenta.setText(String.format("%10d", cuentaCorriente.getNumeroCuenta()));
        lblTxtIBAN.setText(Banking.fourDigitGroup(cuentaCorriente.getIban()));
        lblTxtImpSaldoActual.setText(Functions.formatAmount(cuentaCorriente.getImpSaldoActual()));
        txtTipoInteres.setText(Functions.formatNumber(cuentaCorriente.getTipoInteres()));        
    }
 
    /**
     * Método para recoger los campos del formulario en la propiedad
     * {@link cuentaCorriente}
     */    
    protected void recogerCampos() {
        cuentaCorriente.setNumeroCuenta(Integer.parseInt(txtNumeroCuenta.getText()));
        cuentaCorriente.setTipoInteres(Functions.getBigDecimalFromFormattedNumber(txtTipoInteres.getText()));
    }

    /**
     * Método para preparar el formulario en un estado inicial.
     */
    protected void inicializarFormulario() {
        txtNumeroCuenta.requestFocus();
        // Llamada para intentar habilitar los botones CRUD.
        if (this.frmParent != null) {
            frmParent.tryEnableCRUDButtons();
        }        
    }

    /**
     * Método para rellenar la tabla del panel.
     * 
     * @param numeroCuenta El número de la Cuenta Corriente que mostraremos en
     * la tabla (si el valor es "" se mostrarán todas).
     */
    protected void mostrarTabla(String numeroCuenta) {
        cdao.listarCuentaCorrienteNumero(tblCuentaCorriente, numeroCuenta);
    }    
    
    @Override
    protected boolean checkRequiredFields() {
        return !txtNumeroCuenta.getText().equals("") && 
               !txtTipoInteres.getText().equals("");
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlDatos = new javax.swing.JPanel();
        lblNumeroCuenta = new javax.swing.JLabel();
        txtNumeroCuenta = new javax.swing.JTextField();
        lblIBAN = new javax.swing.JLabel();
        lblTxtIBAN = new javax.swing.JLabel();
        lblImpSaldoActual = new javax.swing.JLabel();
        lblTxtImpSaldoActual = new javax.swing.JLabel();
        lblTipoInteres = new javax.swing.JLabel();
        txtTipoInteres = new javax.swing.JTextField();
        pnlTabla = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCuentaCorriente = new javax.swing.JTable() {
            @Override
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
                Component component = super.prepareRenderer(renderer, row, column);
                int rendererWidth = component.getPreferredSize().width;
                TableColumn tableColumn = getColumnModel().getColumn(column);
                tableColumn.setPreferredWidth(Math.max(rendererWidth + getIntercellSpacing().width, tableColumn.getPreferredWidth()));
                return component;
            }
        };

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Cuenta Corriente", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14))); // NOI18N

        pnlDatos.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        pnlDatos.setName("pnlDatos"); // NOI18N

        lblNumeroCuenta.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblNumeroCuenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/search 16px.png"))); // NOI18N
        lblNumeroCuenta.setText("Nº cuenta");
        lblNumeroCuenta.setToolTipText("Campo de búsqueda");
        lblNumeroCuenta.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        lblNumeroCuenta.setName("lblBusqueda"); // NOI18N

        txtNumeroCuenta.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtNumeroCuenta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNumeroCuentaKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNumeroCuentaKeyTyped(evt);
            }
        });

        lblIBAN.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblIBAN.setText("IBAN");

        lblTxtIBAN.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblImpSaldoActual.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblImpSaldoActual.setText("Saldo actual");

        lblTxtImpSaldoActual.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lblTipoInteres.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTipoInteres.setText("% interes");

        txtTipoInteres.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtTipoInteres.setToolTipText("Tipo de interes de la cuenta");
        txtTipoInteres.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTipoInteresKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTipoInteresKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout pnlDatosLayout = new javax.swing.GroupLayout(pnlDatos);
        pnlDatos.setLayout(pnlDatosLayout);
        pnlDatosLayout.setHorizontalGroup(
            pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDatosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNumeroCuenta)
                    .addComponent(lblNumeroCuenta, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTxtIBAN, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIBAN, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTxtImpSaldoActual, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblImpSaldoActual, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTipoInteres, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTipoInteres))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlDatosLayout.setVerticalGroup(
            pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDatosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlDatosLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(txtTipoInteres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlDatosLayout.createSequentialGroup()
                        .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNumeroCuenta)
                            .addComponent(lblImpSaldoActual)
                            .addComponent(lblIBAN)
                            .addComponent(lblTipoInteres))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlDatosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTxtIBAN, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblTxtImpSaldoActual, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtNumeroCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlTabla.setName("pnlTabla"); // NOI18N
        pnlTabla.setPreferredSize(new java.awt.Dimension(465, 126));

        tblCuentaCorriente.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblCuentaCorriente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblCuentaCorriente.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblCuentaCorriente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCuentaCorrienteMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblCuentaCorriente);

        javax.swing.GroupLayout pnlTablaLayout = new javax.swing.GroupLayout(pnlTabla);
        pnlTabla.setLayout(pnlTablaLayout);
        pnlTablaLayout.setHorizontalGroup(
            pnlTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTablaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 573, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlTablaLayout.setVerticalGroup(
            pnlTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlDatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlTabla, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(pnlDatos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTabla, 116, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    protected void tblCuentaCorrienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCuentaCorrienteMouseClicked
        // "getSelectedRow()" nos devuelve el índice de la fila seleccionada.
        int fila = tblCuentaCorriente.getSelectedRow();
        if (fila != -1) {
            cuentaCorriente.setIdCuentaCorriente(Integer.valueOf(tblCuentaCorriente.getModel().getValueAt(fila, 0).toString()));
            // Recuperamos toda la información del objeto "CuentaCorriente" a través
            // de su ID.
            if (cdao.buscarCuentaCorriente(cuentaCorriente.getIdCuentaCorriente())) {
                // Fijamos el objeto CuentaCorriente en el panel y lo enviamos
                // al formulario padre.
                setJPAObject(cdao.getCuentaCorriente());
                sendJPAObjectToFrmParent();
            }
        }
        inicializarFormulario();        
    }//GEN-LAST:event_tblCuentaCorrienteMouseClicked

    private void txtNumeroCuentaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumeroCuentaKeyReleased
        // Filtra la tabla por el número de cuenta introducido.
        mostrarTabla(txtNumeroCuenta.getText());        
        // Llamada para intentar habilitar los botones CRUD.
        if (this.frmParent != null) {
            frmParent.tryEnableCRUDButtons();
        } 
    }//GEN-LAST:event_txtNumeroCuentaKeyReleased

    private void txtNumeroCuentaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumeroCuentaKeyTyped
        // Límite de 10 números
        if (txtNumeroCuenta.getText().length() >= 10)
            evt.consume();
        else
            // Si no se ha llegado al límite de carácteres, comprobamos que
            // sólo sean números y el carácter "."
            Functions.checkNumber(evt);
    }//GEN-LAST:event_txtNumeroCuentaKeyTyped

    private void txtTipoInteresKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTipoInteresKeyReleased
        // Llamada para intentar habilitar los botones CRUD.
        if (this.frmParent != null) {
            frmParent.tryEnableCRUDButtons();
        }
    }//GEN-LAST:event_txtTipoInteresKeyReleased

    private void txtTipoInteresKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTipoInteresKeyTyped
        // Límite de 5 números
        if (txtTipoInteres.getText().length() >= 5)
            evt.consume();
        else
            // Si no se ha llegado al límite de carácteres, comprobamos que
            // sólo sean números y el carácter "."
            Functions.checkNumber(evt);
    }//GEN-LAST:event_txtTipoInteresKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    protected javax.swing.JLabel lblIBAN;
    protected javax.swing.JLabel lblImpSaldoActual;
    protected javax.swing.JLabel lblNumeroCuenta;
    protected javax.swing.JLabel lblTipoInteres;
    protected javax.swing.JLabel lblTxtIBAN;
    protected javax.swing.JLabel lblTxtImpSaldoActual;
    protected javax.swing.JPanel pnlDatos;
    protected javax.swing.JPanel pnlTabla;
    protected javax.swing.JTable tblCuentaCorriente;
    protected javax.swing.JTextField txtNumeroCuenta;
    protected javax.swing.JTextField txtTipoInteres;
    // End of variables declaration//GEN-END:variables
}
